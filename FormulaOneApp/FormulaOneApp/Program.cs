using FormulaOneApp.Configurations;
using FormulaOneApp.Data;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddDbContext<AppDbContext>(opt =>
{
    opt.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection"));
});

builder.Services.Configure<JwtConfig>(builder.Configuration.GetSection("JwtConfig")); // Make Secrets available into DI container as instance of JwtConfig object

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}) // Configuring the authentication middleware to use jwt as authentication scheme
    .AddJwtBearer(jwt =>
    {
        //Converting key to array of bytes for encryption and decryption because we cannot use string directly for that
        var key = Encoding.ASCII.GetBytes(builder.Configuration.GetSection("JwtConfig:Secret").Value);
        //Saves the header of the token in the authentication properties. We are keeping header inside request once authentication is done
        jwt.SaveToken = true;
        //This configured parameters allow us to validate the recieved token to confirm that it was generated by us and it is not just a random string
        jwt.TokenValidationParameters = new TokenValidationParameters()
        {
            //check if the key contained in the recieved token is our key which was used to generate token
            ValidateIssuerSigningKey = true,
            //We are providing the key which we have to match in the header
            IssuerSigningKey = new SymmetricSecurityKey(key),

            ValidateIssuer = false, // for dev
            ValidateAudience = false, // for dev

            // for now false needs to be updated when refresh token is added
            RequireExpirationTime = false,

            //code will be able to calculate for how long the token has been created
            ValidateLifetime = true,

        };

    });

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// Using the configured authorization middleware in our apps request pipeline
app.UseAuthorization(); 

app.UseAuthorization();

app.MapControllers();

app.Run();
